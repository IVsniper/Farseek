import groovy.json.*
import groovy.util.slurpersupport.GPathResult
import groovy.xml.StreamingMarkupBuilder
import groovy.xml.XmlUtil

def modName = project.name
def modId = modName.toLowerCase()

// ---------------------------------------------------------------------------------------------------------------------
// Update
// ---------------------------------------------------------------------------------------------------------------------
wrapper {
    gradleVersion = gradleWrapperVersion
    distributionType = Wrapper.DistributionType.ALL
}

apply plugin: "scala"
tasks.withType(ScalaCompile) {
    targetCompatibility = "" // Suppress default of 1.8 until Forge's Scala is updated to 2.11.5+ (https://issues.scala-lang.org/browse/SI-8966)
    scalaCompileOptions.deprecation = true
    scalaCompileOptions.unchecked = true
    scalaCompileOptions.additionalParameters = ["-explaintypes", "-feature"]
}

repositories {
    maven {
        url "https://cursemaven.com"
    }
}

ext.coreModClass = "farseek.core.FarseekCoreMod"
def jvmArgs = "-Dfml.coreMods.load=$coreModClass"
File clientRunDir = file("run/client")
File serverRunDir = file("run/server")
apply plugin: "net.minecraftforge.gradle.forge"
minecraft {
    version = forgeRevision
    mappings = mcpMappings
    useDepAts = true
    runDir = clientRunDir.path
    clientJvmArgs += jvmArgs
    serverJvmArgs += jvmArgs
}

def modAuthorList = modAuthors.split(";")
def modDependencyList = modDependencies.split(";")
ext.writeJsonFile = { File dir, String name, Object contents ->
    dir.mkdirs()
    new File(dir, name).text = JsonOutput.prettyPrint(new JsonBuilder(contents).toString())
}
task modInfo { writeJsonFile(sourceSets.main.resources.srcDirs[0], "mcmod.info", [{
   modid        modId
   version      modVersion
   name         modName
   description  modDescription
   url          modUrl
   authorList   modAuthorList
   requiredMods modDependencyList
   dependencies modDependencyList
   useDependencyInformation true
}])}

tasks.setupDecompWorkspace.dependsOn(modInfo)

apply plugin: "idea"
idea.module {
    inheritOutputDirs = true
    excludeDirs += files(".idea", "gradle", "libs", "out", "run")
    scopes.COMPILE.plus   += [ configurations.compile ]
    scopes.TEST.minus     += [ configurations.compile ]
    scopes.RUNTIME.minus  += [ configurations.compile ]
    scopes.PROVIDED.minus += [ configurations.compile ]
}

void editXmlFile(File file, Closure f) {
    def xml = new XmlSlurper().parse(file)
    f(xml)
    file.withWriter { writer -> XmlUtil.serialize( new StreamingMarkupBuilder().bind{mkp.yield xml}, writer) }
}

File workspaceFile = file(".idea/workspace.xml")
genIntellijRuns {
    doFirst {
        editXmlFile(workspaceFile) { GPathResult workspace ->
            workspace.component.find { GPathResult node -> node.@name == "RunManager"}.configuration.findAll { GPathResult node ->
                node.@name == "Minecraft Client" || node.@name == "Minecraft Server" }*.replaceNode{}
        }
    }
    doLast {
        editXmlFile(workspaceFile) { GPathResult workspace ->
            workspace.component.find { GPathResult node -> node.@name == "RunManager"}.configuration.findAll { GPathResult node ->
                node.@name == "Minecraft Client" || node.@name == "Minecraft Server" }*."@singleton" = "true"
            GPathResult runServerConfig = workspace.component.find { GPathResult node ->
                node.@name == "RunManager"}.configuration.find { GPathResult configuration -> configuration.@name == "Minecraft Server" }
            runServerConfig.option.find { GPathResult option ->
                option.@name == "WORKING_DIRECTORY" }.@value = serverRunDir.path
        }
        clientRunDir.mkdirs()
        serverRunDir.mkdirs()
    }
}


// ---------------------------------------------------------------------------------------------------------------------
// Build
// ---------------------------------------------------------------------------------------------------------------------
String mcVersion = minecraft.version
version = "$mcVersion-$modVersion"

jar.manifest.attributes "FMLAT": "${modId}_at.cfg"

task deobfJar(type: Jar) {
    manifest = jar.manifest
    classifier = "deobf"
    from sourceSets.main.output
    from "common.gradle"
}

tasks.jar.dependsOn(deobfJar, sourceJar)

// ---------------------------------------------------------------------------------------------------------------------
// Install
// ---------------------------------------------------------------------------------------------------------------------
task install { dependsOn(jar) }

if(project.hasProperty("minecraftClientDir")) {
    task installClient(type: Sync, dependsOn: reobfJar) {
        from jar
        into "$minecraftClientDir/mods"
        preserve { exclude "${jar.baseName}*.jar" }
    }
    tasks.install.dependsOn(installClient)
}

if(project.hasProperty("minecraftServerDir")) {
    task installServer(type: Sync, dependsOn: reobfJar) {
        from jar
        into "$minecraftServerDir/mods"
        preserve { exclude "${jar.baseName}*.jar" }
    }
    tasks.install.dependsOn(installServer)
}

// ---------------------------------------------------------------------------------------------------------------------
// Release
// ---------------------------------------------------------------------------------------------------------------------
def changeLog = file("changelog.md").text
def releaseChangeLog = changeLog + """
Built using [Forge](http://files.minecraftforge.net/maven/net/minecraftforge/forge/index_${minecraft.version}.html) ${minecraft.forgeVersion} and [MCP mappings](http://export.mcpbot.bspk.rs) ${minecraft.mappings}.
"""

if(project.hasProperty("githubUser") && project.hasProperty("githubApiKey")) {
    apply plugin: "co.riiid.gradle"
    github {
        owner = githubUser
        token = githubApiKey
        repo = modName
        targetCommitish = mcVersion
        tagName = "v$version"
        body = releaseChangeLog
    }
}

if(project.hasProperty("curseForgeId") && project.hasProperty("curseForgeApiKey")) {
    apply plugin: "com.matthewprenger.cursegradle"
    curseforge {
        apiKey = curseForgeApiKey
        project {
            id = curseForgeId
            releaseType = curseForgeReleaseType
            changelog = releaseChangeLog
            changelogType = "markdown"
            addGameVersion "1.12.1"
            addGameVersion "1.12.2"
            if(modId != "farseek") relations { requiredDependency "farseek" }
        }
    }
}
